/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "HiReSamAudioProcessor.h"
#include "HiReSamAudioProcessorEditor.h"


//==============================================================================
HiReSamAudioProcessorEditor::HiReSamAudioProcessorEditor (HiReSamAudioProcessor* ownerFilter)
    : AudioProcessorEditor (ownerFilter),
      spectroscope(11), // FFT Size of 2^11 = 2048
      renderThread("FFT Render Thread")

{
    // The plugin's initial editor size.
    setSize (900, 500);
    
    sampleRate.addListener (this);
    // The sampleRate has already been set in the HiReSamAudioProcessor before
    // the creation of the HiReSamAudioProcessorEditor.
    // Because of this it is important to have the referTo call after the
    // addListener. Only in this order the valueChanged member function
    // will be called implicitly.
    sampleRate.referTo (getProcessor()->sampleRate);
    
    renderThread.addTimeSliceClient (&spectroscope);
    renderThread.startThread (3);
    
    header.setText("High Resolution Spectrum Analyse Meter", dontSendNotification);
    Font headerFont = Font (18.0f);
    header.setFont (headerFont);
    header.setJustificationType(Justification::centred);
    header.setColour (Label::textColourId, Colours::lightgoldenrodyellow);
    header.setColour (Label::backgroundColourId, Colours::black);
    
    addAndMakeVisible (&header);
    addAndMakeVisible (&spectroscope);
    addAndMakeVisible (&pitchDetector);
}

HiReSamAudioProcessorEditor::~HiReSamAudioProcessorEditor()
{
    renderThread.removeTimeSliceClient (&spectroscope);
    renderThread.stopThread (500);
}

//==============================================================================
void HiReSamAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::black);
    
    // bubble
    g.setColour (Colours::white);
    g.fillPath (bubblePath);
    g.setColour (Colour (0xff6f6f6f));
    g.strokePath (bubblePath, PathStrokeType (5.200f));
    
    // image
    const int border = 10;
    const int imageHeight = 150;
    const int imageWidth = 150;
    g.drawImage(ImageCache::getFromMemory (BinaryData::Samuel_Gaehwiler_png, BinaryData::Samuel_Gaehwiler_pngSize), getWidth() - imageWidth - border, getHeight() - imageHeight - border, imageWidth, imageHeight, 0, 0, 300, 300);
//    g.setColour (Colours::black);
//    g.setFont (15.0f);
//    g.drawFittedText ("Zviel Arbet? HiRe sam@klangfreund.com!",
//                      0, 0, getWidth(), getHeight(),
//                      Justification::centred, 1);
}

void HiReSamAudioProcessorEditor::resized()
{
    header.setBounds(0, 0, getWidth(), 24);
    
    const int widthForImageAndBubble = 320;
    spectroscope.setBounds (0, header.getHeight(), getWidth() - widthForImageAndBubble, getHeight() - header.getHeight());
    pitchDetector.setBounds (0, header.getHeight(), spectroscope.getWidth(), getHeight() - header.getHeight() - spectroscope.getHeightOfFrequencyCaption());
    
    bubblePath.clear();
//    bubblePath.startNewSubPath (136.0f, 80.0f);
//    bubblePath.quadraticTo (176.0f, 24.0f, 328.0f, 32.0f);
//    bubblePath.quadraticTo (472.0f, 40.0f, 472.0f, 104.0f);
//    bubblePath.quadraticTo (472.0f, 192.0f, 232.0f, 176.0f);
//    bubblePath.lineTo (184.0f, 216.0f);
//    bubblePath.lineTo (200.0f, 168.0f);
//    bubblePath.quadraticTo (96.0f, 136.0f, 136.0f, 80.0f);
//    bubblePath.closeSubPath();
    float mostRight = getWidth() - 10.0f;
    float width = getWidth() - spectroscope.getWidth() - 30.0f; // 336
    bubblePath.startNewSubPath (mostRight - width, 80.0f);
    bubblePath.quadraticTo (mostRight - 0.881f * width, 24.0f, mostRight - 0.429f * width, 32.0f);
    bubblePath.quadraticTo (mostRight, 40.0f, mostRight, 104.0f);
    bubblePath.quadraticTo (mostRight, 192.0f, mostRight - 0.714f * width, 176.0f);
    //bubblePath.lineTo (mostRight - 0.857f * width, 216.0f); // the tip of the bubble
    bubblePath.lineTo (mostRight - 0.69f * width, 216.0f); // the tip of the bubble
    bubblePath.lineTo (mostRight - 0.810f * width, 168.0f);
    bubblePath.quadraticTo (mostRight - 1.119f * width, 136.0f, mostRight - width, 80.0f);
    bubblePath.closeSubPath();

}

void HiReSamAudioProcessorEditor::valueChanged (Value & value)
{
    if (value.refersToSameSourceAs (sampleRate))
    {
        spectroscope.setSampleRate (sampleRate.getValue());
        pitchDetector.setSampleRate (sampleRate.getValue());
    }
}

HiReSamAudioProcessor* HiReSamAudioProcessorEditor::getProcessor() const
{
    return static_cast <HiReSamAudioProcessor*> (getAudioProcessor());
}
